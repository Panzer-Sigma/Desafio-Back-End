# Modelos de usuário e contratos
#users and contracts
type User {
  id: ID!        
  name: String!     
  email: String!     
}

type Contract {
  id: ID!        
  description: String!   
  user_id: ID!
  user: User         
  created_at: String!    
  fidelity: Int!         
  amount: Float!         
}

#inputs - create and update
input CreateUserInput {
  id: ID
  name: String! 
  email: String!
}

input UpdateUserInput {
  name: String 
  email: String
}

input CreateContractInput {
  id: ID        
  description: String!   
  user_id: ID!     
  created_at: String    
  fidelity: Int!         
  amount: Float!        
}

input UpdateContractInput {    
  description: String   
  user_id: ID          
  created_at: String    
  fidelity: Int         
  amount: Float        
}

#Results 
type ContractsResult {
  Contracts: [Contract]!
  nextToken: String
}

type DeleteResponse {
  success: Boolean
  message: String
}

# Consultas de usuários e contratos
type Query {
#User
  getUser(id: ID!): User          
#Contract
  getContract(id: ID!): Contract          
  getContractsByUser(user_id: ID!): ContractsResult       
}

# Mutations para usuários e contratos
type Mutation {
#User
  createUser(input: CreateUserInput!): User            
  updateUser(id: ID!, input:UpdateUserInput!): User     
  deleteUser(id: ID!): DeleteResponse   
#Contract
  createContract(input: CreateContractInput!): Contract  
  updateContract(id: ID!, input:UpdateContractInput!): Contract      
  deleteContract(id: ID!): DeleteResponse              
              
}

